import json
from asyncio import sleep
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from data import *
from loader import dp, client, bot
from utils import *
from states import AdminPanel
from db.sql_commands import *


@dp.callback_query_handler(lambda c: c.data == 'enter_admin_panel', state=None)
async def admin_enter_panel(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await AdminPanel.main.set()
    admins = select_admins()
    await state.set_data(admins)
    set_steam_id = InlineKeyboardButton('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∏–ø –ø–æ steam_id üõ†Ô∏è', callback_data='admin_get_vip')
    do_mail = InlineKeyboardButton('–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data='do_mail')  # TODO
    add_admin = InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ ‚ûï', callback_data='admin_add_admin')
    list_admins = InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ üîç', callback_data='admin_list_admins')
    delete_admin = InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ ‚ûñ', callback_data='admin_delete_admin')
    leave_admin_panel = InlineKeyboardButton('–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏', callback_data='leave_admin_panel')
    admin_buttons = InlineKeyboardMarkup()
    admin_buttons.row(set_steam_id, do_mail)
    admin_buttons.row(add_admin, list_admins)
    admin_buttons.row(delete_admin)
    admin_buttons.row(leave_admin_panel)
    await callback_query.message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                                        reply_markup=admin_buttons)


@dp.callback_query_handler(lambda c: c.data == 'do_mail', state=AdminPanel.main)
async def mail(cb: types.CallbackQuery):
    await cb.message.answer(
        '‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:'
    )
    await AdminPanel.get_mail_text.set()


@dp.message_handler(state=AdminPanel.get_mail_text, content_types=types.ContentType.ANY)
async def mail_on(message: types.Message, state: FSMContext):
    add_log('–ó–∞–ø—É—â–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞')
    if types.ContentType.TEXT == message.content_type:  # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç
        for user in select_users():
            try:
                await dp.bot.send_message(
                    chat_id=user.user_id,
                    text=message.html_text,
                    parse_mode='MarkdownV2'
                )
                add_log(f'Send message to {user.user_id}')
                await sleep(0.33)
            except Exception as e:
                add_log(str(e))
        else:
            add_log('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
            await message.answer(
                '‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!'
            )


    elif types.ContentType.PHOTO == message.content_type:  # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ
        for user in select_users():
            try:
                await dp.bot.send_photo(
                    chat_id=user.user_id,
                    photo=message.photo[-1].file_id,
                    caption=message.html_text if message.caption else None,
                    parse_mode='MarkdownV2'
                )
                add_log(f'Send message to {user.user_id}')

                await sleep(0.33)
            except Exception as e:
                add_log(str(e))
                # pass
        else:
            add_log('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
            await message.answer(
                '‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!'
            )

    elif types.ContentType.VIDEO == message.content_type:  # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ
        for user in select_users():
            try:
                await dp.bot.send_video(
                    chat_id=user.user_id,
                    video=message.video.file_id,
                    caption=message.html_text if message.caption else None,
                    parse_mode='MarkdownV2'
                )
                add_log(f'Send message to {user.user_id}')

                await sleep(0.33)
            except Exception as e:
                add_log(str(e))
                # pass
        else:
            add_log('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')

            await message.answer(
                '‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!'
            )

    elif types.ContentType.ANIMATION == message.content_type:  # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª gif
        for user in select_users():
            try:
                await dp.bot.send_animation(
                    chat_id=user.user_id,
                    animation=message.animation.file_id,
                    caption=message.html_text if message.caption else None,
                    parse_mode='MarkdownV2'
                )
                add_log(f'Send message to {user.user_id}')

                await sleep(0.33)
            except Exception as e:
                add_log(str(e))
        else:
            add_log('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')

            await message.answer(
                '‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!'
            )

    else:
        await message.answer(
            '‚ùóÔ∏è –î–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!'
        )
        add_log('–î–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!')
    await state.finish()


@dp.callback_query_handler(lambda c: c.data == 'leave_admin_panel', state=AdminPanel.main)
async def admin_leave_panel(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await state.finish()
    await callback_query.message.answer('–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.')
    # state = Dispatcher.get_current().current_state()
    # await state.finish()


@dp.callback_query_handler(lambda c: c.data == 'admin_list_admins', state=AdminPanel.main)
async def admin_list_admins(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    admins = await state.get_data()
    admins = [f"‚ûñ {admin}\n" for admin in admins]
    await callback_query.message.answer(f"–ê–¥–º–∏–Ω—ã:\n{''.join(admins)}")


@dp.callback_query_handler(lambda c: c.data == 'admin_delete_admin', state=AdminPanel.main)
async def admin_delete_admin(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await AdminPanel.delete_admin.set()
    await callback_query.message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,'
                                        ' –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')


@dp.message_handler(state=AdminPanel.delete_admin)
async def admin_delete_admin_from_db(message: types.Message, state: FSMContext):
    admins = await state.get_data()
    id = int(message.text)
    if id not in admins:
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤')
    else:
        admins.pop(admins.index(id))
        await state.set_data(admins)
        delete_admin(id)
        await message.answer(f'‚úÖ –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram id "{message.text}" –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–µ')
        await state.finish()


@dp.callback_query_handler(lambda c: c.data == 'admin_add_admin', state=AdminPanel.main)
async def admin_add_admin(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await AdminPanel.add_admin.set()
    await callback_query.message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')


@dp.message_handler(state=AdminPanel.add_admin)
async def admin_add_admin_in_db(message: types.Message, state: FSMContext):
    admins = await state.get_data()
    id = int(message.text)
    if id in admins:
        await message.answer('–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.')
    else:
        admins.append(id)
        await state.set_data(admins)
        set_admin(id)
        await message.answer(f'‚úÖ –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram id "{message.text}" –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–µ')
        await state.finish()


@dp.callback_query_handler(lambda c: c.data == 'admin_get_vip', state=AdminPanel.main)
async def admin_get_vip(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await AdminPanel.get_steam_id.set()
    await callback_query.message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ steam_id –≤ –ª—é–±–æ–º –≤–∏–¥–µ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–¥–∞—Ç—å VIP.')


@dp.message_handler(state=AdminPanel.get_steam_id)
async def admin_get_steam_id(message: types.Message, state: FSMContext):
    data = await search_for_steam_id(message.text, search_steam_id_error)
    if data['status'] == 'error':
        await message.answer(search_steam_id_error)
    else:
        steam_id = data['text']
        if steam_id != 0:
            write_data(USERS_FILE_PATH, steam_id)
            add_log(f'{message.from_user.id} –≤—ã–¥–∞–ª VIP "{steam_id}"')
            await state.finish()
            await message.answer(vip_set)
        else:
            await message.answer(steam_id_not_found)
